package base.spring.security;

import javax.naming.CommunicationException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;

import base.utils.AppUtil;
import base.utils.FacadeException;
//import caat.stat.auth.dao.AuthMUserDao;
//import caat.stat.auth.domain.AuthMUser;
//import caat.stat.auth.domain.AuthMUserRole;

@Service("commonDaoLdapAuthenticationProvider")
public class CommonDaoLdapAuthenticationProvider implements AuthenticationProvider {
	private static final Logger log = LogManager.getLogger(CommonDaoLdapAuthenticationProvider.class);
//	@Autowired
//	private AuthMUserDao authMUserDao;

	///@Transactional(readOnly = true)
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		log.debug("authenticate");
		try {
			String username = authentication.getName();
			String password = authentication.getCredentials().toString();
			if (AppUtil.isBlankOrNull(username) && AppUtil.isBlankOrNull(password)) {
				throw new AppAuthenticationException("error.login.usernameAndPassword.required");
			} else if (AppUtil.isBlankOrNull(username)) {
				throw new AppAuthenticationException("error.login.username.required");
			} else if (AppUtil.isBlankOrNull(password)) {
				throw new AppAuthenticationException("error.login.password.required");
			}
			if(false) {
				LdapConnector.connectWithManager(username, password);//ต้องลบออก
			}
			/*
			AuthMUser authMUser = authMUserDao.findByLoginId(username);
			if (authMUser == null) {
				throw new AppAuthenticationException("error.login.user.notFound",
						new String[] { username });
			}
			if ("I".equalsIgnoreCase(authMUser.getActiveStatus())) {
				throw new AppAuthenticationException("error.login.user.notActive",
						new String[] { username });
			}
			if ("true".equalsIgnoreCase(AppUtil.getAppConfigByKey("IS_LDAP_AUTHENTICATION"))
					&& !authMUser.getDbAuthAsBoolean()) {
				LdapConnector.connectWithManager(username, password);
			} else {
				PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
				if (!passwordEncoder.matches(password, authMUser.getPassword())) {
					throw new AppAuthenticationException("error.login.password.incorrect");
				}
			}
			Set<GrantedAuthority> setAuths = new HashSet<GrantedAuthority>();
			for (AuthMUserRole userRole : authMUser.getAuthMUserRoleList()) {
				setAuths.add(new SimpleGrantedAuthority(userRole.getRoleShortName().trim()));
			}
			List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(setAuths);
			
			AppUser user = new AppUser(authMUser.getLoginId(), authMUser.getPassword(), true, true, true, true, authorities);
			user.setAuthMUser(authMUser);
			return new UsernamePasswordAuthenticationToken(user, user.getPassword(), user.getAuthorities());
			*/
			return new UsernamePasswordAuthenticationToken(username, password, null);
		} catch (AppAuthenticationException dcaEx) {
			throw dcaEx;
		} catch (FacadeException fcEx) {
			throw new AppAuthenticationException(fcEx.getMessage());
		} catch (CommunicationException comEx) {
			throw new AppAuthenticationException("error.login.ldap.connection");
		} catch (javax.naming.AuthenticationException ldapAuthEx) {
			throw new AppAuthenticationException("error.login.ldap.authentication");
		} catch (javax.naming.PartialResultException partialResultEx) {
			throw new AppAuthenticationException("error.login.ldap.partialResult");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new AppAuthenticationException(ex.toString());
		}
	}

	@Override
	public boolean supports(Class<?> authentication) {
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}

}
